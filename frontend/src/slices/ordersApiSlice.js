import { apiSlice } from './apiSlice'; // Assuming apiSlice is defined elsewhere
import { ORDERS_URL, PAYPAL_URL } from '../constants'; // Assuming ORDERS_URL and PAYPAL_URL are defined constants

// Injecting endpoints into apiSlice
export const orderApiSlice = apiSlice.injectEndpoints({
	endpoints: (builder) => ({
		// Mutation to create an order
		createOrder: builder.mutation({
			query: (order) => ({
				url: ORDERS_URL,
				method: 'POST',
				body: order,
			}),
		}),
		// Query to get order details by ID
		getOrderDetails: builder.query({
			query: (id) => ({
				url: `${ORDERS_URL}/${id}`,
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
		// Mutation to pay for an order
		payOrder: builder.mutation({
			query: ({ orderId, details }) => ({
				url: `${ORDERS_URL}/${orderId}/pay`,
				method: 'PUT',
				body: details,
			}),
		}),
		// Query to get PayPal client ID
		getPaypalClientId: builder.query({
			query: () => ({
				url: PAYPAL_URL,
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
		// Query to get current user's orders
		getMyOrders: builder.query({
			query: () => ({
				url: `${ORDERS_URL}/mine`,
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
		// Query to get all orders (admin)
		getOrders: builder.query({
			query: () => ({
				url: ORDERS_URL,
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
		// Mutation to mark an order as delivered
		deliverOrder: builder.mutation({
			query: (orderId) => ({
				url: `${ORDERS_URL}/${orderId}/deliver`,
				method: 'PUT',
			}),
		}),
	}),
});

// Export hooks generated by injectEndpoints
export const {
	useCreateOrderMutation,
	useGetOrderDetailsQuery,
	usePayOrderMutation,
	useGetPaypalClientIdQuery,
	useGetMyOrdersQuery,
	useGetOrdersQuery,
	useDeliverOrderMutation,
} = orderApiSlice;
