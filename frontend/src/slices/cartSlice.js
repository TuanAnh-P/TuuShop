import { createSlice } from '@reduxjs/toolkit';
import { updateCart } from '../utils/cartUtils'; // Assuming this utility function exists

// Initial state fetching cart data from localStorage if available, otherwise initializing with default values
const initialState = localStorage.getItem('cart')
	? JSON.parse(localStorage.getItem('cart'))
	: { cartItems: [], shippingAddress: {}, paymentMethod: 'PayPal' };

// Create cartSlice using createSlice
const cartSlice = createSlice({
	name: 'cart', // Slice name
	initialState, // Initial state
	reducers: {
		// Reducer to add item to cart
		addToCart: (state, action) => {
			const item = action.payload;
			const existItem = state.cartItems.find((x) => x._id === item._id);

			if (existItem) {
				state.cartItems = state.cartItems.map((x) =>
					x._id === existItem._id ? item : x
				);
			} else {
				state.cartItems = [...state.cartItems, item];
			}

			// Update cart using utility function and return the updated state
			return updateCart(state);
		},
		// Reducer to remove item from cart
		removeFromCart: (state, action) => {
			state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);

			// Update cart using utility function and return the updated state
			return updateCart(state);
		},
		// Reducer to save shipping address
		saveShippingAddress: (state, action) => {
			state.shippingAddress = action.payload;

			// Update cart using utility function and return the updated state
			return updateCart(state);
		},
		// Reducer to save payment method
		savePaymentMethod: (state, action) => {
			state.paymentMethod = action.payload;

			// Update cart using utility function and return the updated state
			return updateCart(state);
		},
		// Reducer to clear cart items
		clearCartItems: (state, action) => {
			state.cartItems = [];

			// Update cart using utility function and return the updated state
			return updateCart(state);
		},
	},
});

// Export actions generated by createSlice
export const {
	addToCart,
	removeFromCart,
	saveShippingAddress,
	savePaymentMethod,
	clearCartItems,
} = cartSlice.actions;

// Export reducer generated by createSlice
export default cartSlice.reducer;
