import { PRODUCTS_URL } from '../constants'; // Assuming PRODUCTS_URL is defined
import { apiSlice } from './apiSlice'; // Assuming apiSlice is defined elsewhere

// Injecting endpoints into apiSlice for products
export const productsApiSlice = apiSlice.injectEndpoints({
	endpoints: (builder) => ({
		// Query to fetch products with optional keyword and pageNumber parameters
		getProducts: builder.query({
			query: ({ keyword, pageNumber }) => ({
				url: PRODUCTS_URL,
				params: { keyword, pageNumber },
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
			providesTags: ['Products'], // Provides caching tag 'Products' for invalidation
		}),
		// Query to fetch product details by productId
		getProductDetails: builder.query({
			query: (productId) => ({
				url: `${PRODUCTS_URL}/${productId}`,
			}),
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
		// Mutation to create a new product
		createProduct: builder.mutation({
			query: () => ({
				url: `${PRODUCTS_URL}`,
				method: 'POST',
			}),
			invalidatesTags: ['Product'], // Invalidates caching tag 'Product' after mutation
		}),
		// Mutation to update an existing product
		updateProduct: builder.mutation({
			query: (data) => ({
				url: `${PRODUCTS_URL}/${data.productId}`,
				method: 'PUT',
				body: data,
			}),
			invalidatesTags: ['Products'], // Invalidates caching tag 'Products' after mutation
		}),
		// Mutation to upload a product image
		uploadProductImage: builder.mutation({
			query: (data) => ({
				url: `/api/upload`,
				method: 'POST',
				body: data,
			}),
		}),
		// Mutation to delete a product by productId
		deleteProduct: builder.mutation({
			query: (productId) => ({
				url: `${PRODUCTS_URL}/${productId}`,
				method: 'DELETE',
			}),
			providesTags: ['Product'], // Provides caching tag 'Product' for invalidation
		}),
		// Mutation to create a review for a product by productId
		createReview: builder.mutation({
			query: (data) => ({
				url: `${PRODUCTS_URL}/${data.productId}/reviews`,
				method: 'POST',
				body: data,
			}),
			invalidatesTags: ['Product'], // Invalidates caching tag 'Product' after mutation
		}),
		// Query to fetch top products
		getTopProducts: builder.query({
			query: () => `${PRODUCTS_URL}/top`,
			keepUnusedDataFor: 5, // Keep unused data in cache for 5 minutes
		}),
	}),
});

// Export hooks generated by injectEndpoints for products
export const {
	useGetProductsQuery,
	useGetProductDetailsQuery,
	useCreateProductMutation,
	useUpdateProductMutation,
	useUploadProductImageMutation,
	useDeleteProductMutation,
	useCreateReviewMutation,
	useGetTopProductsQuery,
} = productsApiSlice;
